# -*- coding: utf-8 -*-
"""Numpy Exercises1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Q7KggEk0RqAg_uygO6ClY8YA1r__BbS

# NumPy Exercises 
Here output is specified. You have to write code to generate that output

#### Import NumPy as np
"""



"""#### Create an array of 10 zeros"""

import numpy as np
array=np.zeros(10)
print("An array of 10 zeros:")
print(array)

"""#### Create an array of 10 ones"""

import numpy as np
array=np.ones(10)
print("An array of 10 ones:")
print(array)

"""#### Create an array of 10 fives"""

import numpy as np
array=np.ones(10)*5
print("An array of 10 five:")
print(array)

"""#### Create an array of the integers from 10 to 50"""

import numpy as np
array=np.arange(10,51)
print("Array of all the even integers from 10 to 50")
print(array)

"""#### Create an array of all the even integers from 10 to 50"""

import numpy as np
array=np.arange(10,51,2)
print("Array of all the even integers from 10 to 50")
print(array)

"""#### Create a 3x3 matrix with values ranging from 0 to 8"""

import numpy as np
matrix =  np.arange(0, 9).reshape(3,3)
print(matrix)

"""#### Create a 3x3 identity matrix"""

import numpy as np
array=np.identity(3)
print('3x3 matrix:')
print(array)

"""#### Create an array of 20 linearly spaced points between 0 and 1:"""

np.linspace(0, 1, 20)

"""## Numpy Indexing and Selection

Now you will be given a few matrices, and be asked to replicate the resulting matrix outputs:
"""

mat = np.arange(1,26).reshape(5,5)
mat

# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE

mat[2:,1:]

# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE

mat[3][4]

# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE

mat[0:3,1].reshape(3,1)

# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE

mat[0:3,1:2]

# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE

mat[3:]

"""### Now do the following

#### Get the sum of all the values in mat
"""

np.sum(mat)

"""#### Get the standard deviation of the values in mat"""

np.std(mat)

"""#### Get the sum of all the columns in mat"""

mat.sum(axis=0)